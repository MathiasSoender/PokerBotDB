#BB: 0= check, 1= call multiway, 2 = call, 3 = raise small bets (3bet) or call 3bet, 4 = 4bet or call 4bet, 5 = allin
#Other: 1 = open otherwise fold, 2 = call open, 3 = 3bet / call 3bet, 4 = ^
       #1 = if limped, call

import random

class Range:
    def __init__(self):
                    #  A  K  Q  J  T  9  8  7  6  5  4  3  2
        self.range = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #A
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #K
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #Q
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #J
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #T
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #9
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #8
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #7
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] #2
    def BB(self):
                    #  A  K  Q  J  T  9  8  7  6  5  4  3  2
        self.range = [[5, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2], #A
                      [5, 5, 4, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1], #K
                      [4, 3, 5, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0], #Q
                      [3, 3, 2, 4, 2, 2, 1, 1, 0, 0, 0, 0, 0], #J
                      [3, 2, 2, 2, 4, 2, 2, 1, 0, 0, 0, 0, 0], #T
                      [2, 2, 2, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0], #9
                      [2, 1, 1, 1, 1, 1, 3, 2, 0, 0, 0, 0, 0], #8
                      [2, 0, 0, 0, 0, 0, 1, 3, 2, 0, 0, 0, 0], #7
                      [2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], #6
                      [2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0], #5
                      [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], #4
                      [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], #3
                      [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]] #2
    def SB(self):
                    #  A  K  Q  J  T  9  8  7  6  5  4  3  2
        self.range = [[5, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2], #A
                      [5, 5, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1], #K
                      [4, 3, 5, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1], #Q
                      [3, 3, 2, 4, 3, 2, 2, 2, 1, 1, 1, 1, 1], #J
                      [3, 2, 2, 2, 4, 3, 2, 1, 1, 1, 1, 1, 1], #T
                      [2, 1, 1, 1, 1, 3, 2, 2, 1, 1, 1, 1, 1], #9
                      [2, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1], #8
                      [2, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1], #7
                      [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1], #6
                      [2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1], #5
                      [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 1, 1], #4
                      [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1], #3
                      [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]] #2
    def BTN(self):
                    #  A  K  Q  J  T  9  8  7  6  5  4  3  2
        self.range = [[5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3], #A
                      [5, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2], #K
                      [4, 4, 5, 4, 4, 3, 2, 2, 2, 2, 1, 1, 1], #Q
                      [4, 3, 3, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1], #J
                      [3, 2, 2, 2, 4, 3, 2, 2, 2, 1, 1, 1, 1], #T
                      [2, 2, 2, 2, 2, 4, 3, 2, 2, 2, 1, 1, 1], #9
                      [2, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 1, 1], #8
                      [2, 1, 1, 1, 1, 1, 1, 3, 2, 2, 1, 1, 1], #7
                      [2, 1, 1, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1], #6
                      [2, 1, 1, 0, 0, 0, 0, 1, 1, 3, 2, 1, 1], #5
                      [2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1], #4
                      [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], #3
                      [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]] #2
    def CO(self):
                    #  A  K  Q  J  T  9  8  7  6  5  4  3  2
        self.range = [[5, 5, 4, 4, 4, 3, 3, 3, 2, 3, 2, 2, 2],  # A
                      [5, 5, 4, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1],  # K
                      [4, 4, 5, 3, 3, 2, 2, 1, 1, 1, 1, 0, 0],  # Q
                      [4, 3, 2, 4, 3, 2, 2, 1, 1, 0, 0, 0, 0],  # J
                      [3, 2, 2, 2, 4, 3, 2, 1, 1, 0, 0, 0, 0],  # T
                      [1, 1, 1, 1, 1, 4, 3, 2, 1, 1, 0, 0, 0],  # 9
                      [1, 0, 0, 0, 0, 1, 3, 2, 2, 1, 1, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 1, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 0],  # 6
                      [1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]]  # 2
    def MP(self):
                    #  A  K  Q  J  T  9  8  7  6  5  4  3  2
        self.range = [[5, 5, 4, 4, 4, 3, 2, 2, 2, 3, 2, 2, 2],  # A
                      [5, 5, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0],  # K
                      [4, 4, 5, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0],  # Q
                      [4, 3, 2, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0],  # J
                      [3, 1, 1, 1, 4, 2, 2, 0, 0, 0, 0, 0, 0],  # T
                      [0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]]  # 2
    def UTG(self):
                    #  A  K  Q  J  T  9  8  7  6  5  4  3  2
        self.range = [[5, 5, 4, 4, 4, 3, 2, 2, 2, 3, 2, 2, 2],  # A
                      [5, 5, 4, 3, 3, 2, 1, 0, 0, 0, 0, 0, 0],  # K
                      [4, 4, 5, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0],  # Q
                      [4, 3, 2, 4, 3, 2, 0, 0, 0, 0, 0, 0, 0],  # J
                      [3, 0, 0, 0, 4, 3, 1, 0, 0, 0, 0, 0, 0],  # T
                      [0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]]  # 2

    # not used
    def draw_range(self, range_nums):
        rows = [0] * 13
        cols = [0] * 13
        rows_name = list(range(0,13))
        cols_name = list(range(0,13))
        for i in range(0, len(self.range)):
            for j in range(0, len(self.range)):
                if self.range[i][j] in range_nums:
                    rows[i] += 1
        selected_row = random.choices(population=rows_name, weights=rows, k=1)[0]

        for i in range(0, len(self.range[selected_row])):
            if self.range[selected_row][i] in range_nums:
                cols[i] += 1


        select_col = random.choices(population=cols_name, weights=cols, k=1)[0]
        return selected_row, select_col